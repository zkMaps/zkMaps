{
  "address": "0x8B39C811c9E768fa382D5e008054A9217121a9B3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256[9]",
          "name": "input",
          "type": "uint256[9]"
        }
      ],
      "name": "IsVerified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[9]",
          "name": "input",
          "type": "uint256[9]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0616c5853b6f5d6ba8ca63e2cf19e42e9898a8640477f52b4b3b60e59066d55",
  "receipt": {
    "to": null,
    "from": "0x819Db8B72109B4b374FC0801a805A3e531E65C26",
    "contractAddress": "0x8B39C811c9E768fa382D5e008054A9217121a9B3",
    "transactionIndex": 44,
    "gasUsed": "1345960",
    "logsBloom": "0x
    "blockHash": "0xe88b0d842e5684b1da8bc7887497c483e3b9789d7a2e34d528384252a0457de3",
    "transactionHash": "0xe0616c5853b6f5d6ba8ca63e2cf19e42e9898a8640477f52b4b3b60e59066d55",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 35197136,
        "transactionHash": "0xe0616c5853b6f5d6ba8ca63e2cf19e42e9898a8640477f52b4b3b60e59066d55",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000819db8b72109b4b374fc0801a805a3e531e65c26",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001b65e00181e19b80000000000000000000000000000000000000000000000001dbbd658536a1cca00000000000000000000000000000000000000000000049a5eae553380fd05e50000000000000000000000000000000000000000000000001c0578583b4c031200000000000000000000000000000000000000000000049a6064b333991b1f9d",
        "logIndex": 556,
        "blockHash": "0xe88b0d842e5684b1da8bc7887497c483e3b9789d7a2e34d528384252a0457de3"
      }
    ],
    "blockNumber": 35197136,
    "cumulativeGasUsed": "13300914",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "8a00d3a50c275c5188b9f71fa7ae6472",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[9]\",\"name\":\"input\",\"type\":\"uint256[9]\"}],\"name\":\"IsVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[9]\",\"name\":\"input\",\"type\":\"uint256[9]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[9])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"circuits/contracts/groth16/RayTracing4/VerifierRayTracing4.sol\":\"VerifierRayTracing4\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"circuits/contracts/groth16/RayTracing4/VerifierRayTracing4.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.11;\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n\\n/*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0)\\n            return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-add-failed\\\");\\n    }\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success,\\\"pairing-mul-failed\\\");\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length,\\\"pairing-lengths-failed\\\");\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++)\\n        {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2,\\n            G1Point memory d1, G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\ncontract VerifierRayTracing4 {\\n    using Pairing for *;\\n    event IsVerified(bool indexed isVerified, address indexed user, uint256[9] indexed input);\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n             6375614351688725206403948262868962793625744043794305715222011528459656738731],\\n            [21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n             10505242626370262277552901082094356697409835680220590971873171140371331206856]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.IC = new Pairing.G1Point[](10);\\n        \\n        vk.IC[0] = Pairing.G1Point( \\n            4356745776060513899970493011118553724479776074500321368675570937233462651076,\\n            18844569946584143123035556438029005817328876278988457358792374618048106314639\\n        );                                      \\n        \\n        vk.IC[1] = Pairing.G1Point( \\n            16297041061538886815747804762017072649673791593451399623773642777872794059444,\\n            3282712410481777337791244479652746530388597744052675968249225497322548122345\\n        );                                      \\n        \\n        vk.IC[2] = Pairing.G1Point( \\n            5878826627623683225777932695471671346147771552214265882634654691726288573140,\\n            5123831063940843469526220550614444617974185893052097628256789924015589033726\\n        );                                      \\n        \\n        vk.IC[3] = Pairing.G1Point( \\n            20040696315087410167908768789269814673987944716232745669890274103483958963050,\\n            6056953304175130818692387084440325182443788131213720127422719287535726893640\\n        );                                      \\n        \\n        vk.IC[4] = Pairing.G1Point( \\n            19621020156375406832808780844117149877185303799903557473272150693885255011341,\\n            13761950564984639477402191116359823502056982746775954043385374892932685351246\\n        );                                      \\n        \\n        vk.IC[5] = Pairing.G1Point( \\n            6326176357440419017249580418163159800764230147220412723542645151777191726439,\\n            7722351050949615880549039293280243127173128068604225920350486693566688659022\\n        );                                      \\n        \\n        vk.IC[6] = Pairing.G1Point( \\n            5362335625703025889913810495860887105869414279830040665101087751199422135035,\\n            3574010622196219532025132468084974430014681921153188419990947884519572568828\\n        );                                      \\n        \\n        vk.IC[7] = Pairing.G1Point( \\n            1321212774908659207647835436428565375413932008247979182415889302814520237070,\\n            4811982284635889135384363650769742197406283864206969803053524027328899565216\\n        );                                      \\n        \\n        vk.IC[8] = Pairing.G1Point( \\n            9101225519964159418337630656307218219930145921476285751636819841548479331930,\\n            7038899372098068949813274890539386430405729664375686103836401045295469913435\\n        );                                      \\n        \\n        vk.IC[9] = Pairing.G1Point( \\n            7125505473212652321091573615799145691688319809339008521493378231785809829291,\\n            11229565504838869003668274326193674873409907039072325526872528259310123999378\\n        );                                      \\n        \\n    }\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length,\\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field,\\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (!Pairing.pairingProd4(\\n            Pairing.negate(proof.A), proof.B,\\n            vk.alfa1, vk.beta2,\\n            vk_x, vk.gamma2,\\n            proof.C, vk.delta2\\n        )) return 1;\\n        return 0;\\n    }\\n    /// @return r  bool true if proof is valid\\n    function verifyProof(\\n            uint[2] memory a,\\n            uint[2][2] memory b,\\n            uint[2] memory c,\\n            uint[9] memory input\\n        ) public returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint[] memory inputValues = new uint[](input.length);\\n        for(uint i = 0; i < input.length; i++){\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            emit IsVerified(true, msg.sender, input);\\n            return true;\\n        } else {\\n            emit IsVerified(false, msg.sender, input);\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x154b01b95df7d9be1dac1fb86703b0f9cd4bbc20e9336c9392b853804db90627\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[9])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}