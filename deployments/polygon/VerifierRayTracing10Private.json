{
  "address": "0x78842c057FCBF2d91d4301c8e4ac1846053134F2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "IsVerified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "input",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x818b92ce82b62c79a6a0c9956bbd243a701ebdc5be314de8819799f8c54608ee",
  "receipt": {
    "to": null,
    "from": "0x819Db8B72109B4b374FC0801a805A3e531E65C26",
    "contractAddress": "0x78842c057FCBF2d91d4301c8e4ac1846053134F2",
    "transactionIndex": 30,
    "gasUsed": "1174744",
    "logsBloom": "0x
    "blockHash": "0x77281a1d38415b7c4d56c40620eef417f86c33a367c08d67bed8234aa8dc2bef",
    "transactionHash": "0x818b92ce82b62c79a6a0c9956bbd243a701ebdc5be314de8819799f8c54608ee",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 37110391,
        "transactionHash": "0x818b92ce82b62c79a6a0c9956bbd243a701ebdc5be314de8819799f8c54608ee",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000819db8b72109b4b374fc0801a805a3e531e65c26",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000963f3e7597c00000000000000000000000000000000000000000000000000101a3b5a54385d12a000000000000000000000000000000000000000000000651abddf446f2d2b88c000000000000000000000000000000000000000000000001010d7666cdee112a000000000000000000000000000000000000000000000651ac743385686a788c",
        "logIndex": 105,
        "blockHash": "0x77281a1d38415b7c4d56c40620eef417f86c33a367c08d67bed8234aa8dc2bef"
      }
    ],
    "blockNumber": 37110391,
    "cumulativeGasUsed": "5880331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "18de01010cffd6358c6a0ffd2b429868",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"IsVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"input\",\"type\":\"uint256[2]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"circuits/contracts/groth16/RayTracing10Private/VerifierRayTracing10Private.sol\":\"VerifierRayTracing10Private\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"circuits/contracts/groth16/RayTracing10Private/VerifierRayTracing10Private.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.11;\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n\\n/*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0)\\n            return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-add-failed\\\");\\n    }\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success,\\\"pairing-mul-failed\\\");\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length,\\\"pairing-lengths-failed\\\");\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++)\\n        {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2,\\n            G1Point memory d1, G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\ncontract VerifierRayTracing10Private {\\n    using Pairing for *;\\n    event IsVerified(bool indexed isVerified, address indexed user, uint256[2] indexed input);\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n             6375614351688725206403948262868962793625744043794305715222011528459656738731],\\n            [21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n             10505242626370262277552901082094356697409835680220590971873171140371331206856]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.IC = new Pairing.G1Point[](3);\\n        \\n        vk.IC[0] = Pairing.G1Point( \\n            3422626609705725534203131234795647361325078248929170078132569814040022950164,\\n            19747853002680048236729678667106507341384560726538815632179809425432850730444\\n        );                                      \\n        \\n        vk.IC[1] = Pairing.G1Point( \\n            1742215309863202427194543151503174238904332535008177289056638494719482826475,\\n            14484829909686630286858377487495780061010991786010570768907165325746668575901\\n        );                                      \\n        \\n        vk.IC[2] = Pairing.G1Point( \\n            9087910635282511836010846094567463651153019668914716727598677489081256020938,\\n            6953710012000424083774438496788617972572644846375360886301315124847792113190\\n        );                                      \\n        \\n    }\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length,\\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field,\\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (!Pairing.pairingProd4(\\n            Pairing.negate(proof.A), proof.B,\\n            vk.alfa1, vk.beta2,\\n            vk_x, vk.gamma2,\\n            proof.C, vk.delta2\\n        )) return 1;\\n        return 0;\\n    }\\n    /// @return r  bool true if proof is valid\\n    function verifyProof(\\n            uint[2] memory a,\\n            uint[2][2] memory b,\\n            uint[2] memory c,\\n            uint[2] memory input\\n        ) public returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint[] memory inputValues = new uint[](input.length);\\n        for(uint i = 0; i < input.length; i++){\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            emit IsVerified(true, msg.sender, input);\\n            return true;\\n        } else {\\n            emit IsVerified(false, msg.sender, input);\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7aa49b5233eb99802766749df4eafb7413a8b5097c9e906d4b19d9958d62a927\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611454806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61018f600480360361014081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b36112dc565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600267ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600281101561038f5784816002811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846104c6565b141561043257836040518082600260200280838360005b838110156103ce5780820151818401526020810190506103b3565b5050505090500191505060405180910390203373ffffffffffffffffffffffffffffffffffffffff16600115157f82e066a33b3040747dcde51a9924250e524b3339803bcb9987b255f2d4bce35d60405160405180910390a46001925050506104be565b836040518082600260200280838360005b8381101561045e578082015181840152602081019050610443565b5050505090500191505060405180910390203373ffffffffffffffffffffffffffffffffffffffff16600015157f82e066a33b3040747dcde51a9924250e524b3339803bcb9987b255f2d4bce35d60405160405180910390a46000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506104f461130f565b6104fc6106fa565b905080608001515160018651011461057c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b610584611356565b6040518060400160405280600081526020016000815250905060008090505b865181101561068357838782815181106105b957fe5b602002602001015110610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b6106748261066f8560800151600185018151811061064e57fe5b60200260200101518a858151811061066257fe5b6020026020010151610b5f565b610c5a565b915080806001019150506105a3565b506106a681836080015160008151811061069957fe5b6020026020010151610c5a565b90506106dc6106b88660000151610d74565b8660200151846000015185602001518587604001518b604001518960600151610e0e565b6106ec57600193505050506106f4565b600093505050505b92915050565b61070261130f565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600367ffffffffffffffff811180156109c657600080fd5b50604051908082528060200260200182016040528015610a0057816020015b6109ed611356565b8152602001906001900390816109e55790505b50816080018190525060405180604001604052807f07912354b8e6a14cae16983936c1dc47e2f9b9014a8c16d20b5f3a62a9e9211481526020017f2ba8e382344124325db51f397268da56025252c716a85f5746b0c974ca280dcc8152508160800151600081518110610a6f57fe5b602002602001018190525060405180604001604052807f03da0f156e81852cd18a3424dbd2ba801ec8fdf8d3482ac6d7a0f274c33c8eeb81526020017f20061f89ed3cb82be0257779e1584177b081a7ec7c93d855c8560e89fbb41c9d8152508160800151600181518110610ae057fe5b602002602001018190525060405180604001604052807f1417933c40bc6e864764950b64152490fd4e88563b58d7d4cd0a886eb3708bca81526020017f0f5fa90f7751763621c1bb80eeaf3e9756914d44df9907cd047bead732e046268152508160800151600281518110610b5157fe5b602002602001018190525090565b610b67611356565b610b6f611370565b836000015181600060038110610b8157fe5b602002018181525050836020015181600160038110610b9c57fe5b6020020181815250508281600260038110610bb357fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610bdc57610bde565bfe5b5080610c52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610c62611356565b610c6a611392565b836000015181600060048110610c7c57fe5b602002018181525050836020015181600160048110610c9757fe5b602002018181525050826000015181600260048110610cb257fe5b602002018181525050826020015181600360048110610ccd57fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610cf657610cf8565bfe5b5080610d6c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610d7c611356565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610db9575060008360200151145b15610ddd576040518060400160405280600081526020016000815250915050610e09565b60405180604001604052808460000151815260200182856020015181610dff57fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610e2a57600080fd5b50604051908082528060200260200182016040528015610e6457816020015b610e51611356565b815260200190600190039081610e495790505b5090506060600467ffffffffffffffff81118015610e8157600080fd5b50604051908082528060200260200182016040528015610ebb57816020015b610ea86113b4565b815260200190600190039081610ea05790505b5090508a82600081518110610ecc57fe5b60200260200101819052508882600181518110610ee557fe5b60200260200101819052508682600281518110610efe57fe5b60200260200101819052508482600381518110610f1757fe5b60200260200101819052508981600081518110610f3057fe5b60200260200101819052508781600181518110610f4957fe5b60200260200101819052508581600281518110610f6257fe5b60200260200101819052508381600381518110610f7b57fe5b6020026020010181905250610f908282610fa0565b9250505098975050505050505050565b60008151835114611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff8111801561104057600080fd5b5060405190808252806020026020018201604052801561106f5781602001602082028036833780820191505090505b50905060008090505b838110156112155786818151811061108c57fe5b6020026020010151600001518260006006840201815181106110aa57fe5b6020026020010181815250508681815181106110c257fe5b6020026020010151602001518260016006840201815181106110e057fe5b6020026020010181815250508581815181106110f857fe5b60200260200101516000015160006002811061111057fe5b602002015182600260068402018151811061112757fe5b60200260200101818152505085818151811061113f57fe5b60200260200101516000015160016002811061115757fe5b602002015182600360068402018151811061116e57fe5b60200260200101818152505085818151811061118657fe5b60200260200101516020015160006002811061119e57fe5b60200201518260046006840201815181106111b557fe5b6020026020010181815250508581815181106111cd57fe5b6020026020010151602001516001600281106111e557fe5b60200201518260056006840201815181106111fc57fe5b6020026020010181815250508080600101915050611078565b5061121e6113da565b6000602082602086026020860160086107d05a03fa9050806000811461124357611245565bfe5b50806112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b6000826000600181106112c857fe5b602002015114159550505050505092915050565b60405180606001604052806112ef611356565b81526020016112fc6113b4565b8152602001611309611356565b81525090565b6040518060a00160405280611322611356565b815260200161132f6113b4565b815260200161133c6113b4565b81526020016113496113b4565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806113c76113fc565b81526020016113d46113fc565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea264697066735822122047ad7bfbefd966517e18d3e99a5a8c6c1b7cbc2cc6b44ae7a57348fcc681ac3464736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61018f600480360361014081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b36112dc565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600267ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600281101561038f5784816002811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846104c6565b141561043257836040518082600260200280838360005b838110156103ce5780820151818401526020810190506103b3565b5050505090500191505060405180910390203373ffffffffffffffffffffffffffffffffffffffff16600115157f82e066a33b3040747dcde51a9924250e524b3339803bcb9987b255f2d4bce35d60405160405180910390a46001925050506104be565b836040518082600260200280838360005b8381101561045e578082015181840152602081019050610443565b5050505090500191505060405180910390203373ffffffffffffffffffffffffffffffffffffffff16600015157f82e066a33b3040747dcde51a9924250e524b3339803bcb9987b255f2d4bce35d60405160405180910390a46000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506104f461130f565b6104fc6106fa565b905080608001515160018651011461057c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b610584611356565b6040518060400160405280600081526020016000815250905060008090505b865181101561068357838782815181106105b957fe5b602002602001015110610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b6106748261066f8560800151600185018151811061064e57fe5b60200260200101518a858151811061066257fe5b6020026020010151610b5f565b610c5a565b915080806001019150506105a3565b506106a681836080015160008151811061069957fe5b6020026020010151610c5a565b90506106dc6106b88660000151610d74565b8660200151846000015185602001518587604001518b604001518960600151610e0e565b6106ec57600193505050506106f4565b600093505050505b92915050565b61070261130f565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160600181905250600367ffffffffffffffff811180156109c657600080fd5b50604051908082528060200260200182016040528015610a0057816020015b6109ed611356565b8152602001906001900390816109e55790505b50816080018190525060405180604001604052807f07912354b8e6a14cae16983936c1dc47e2f9b9014a8c16d20b5f3a62a9e9211481526020017f2ba8e382344124325db51f397268da56025252c716a85f5746b0c974ca280dcc8152508160800151600081518110610a6f57fe5b602002602001018190525060405180604001604052807f03da0f156e81852cd18a3424dbd2ba801ec8fdf8d3482ac6d7a0f274c33c8eeb81526020017f20061f89ed3cb82be0257779e1584177b081a7ec7c93d855c8560e89fbb41c9d8152508160800151600181518110610ae057fe5b602002602001018190525060405180604001604052807f1417933c40bc6e864764950b64152490fd4e88563b58d7d4cd0a886eb3708bca81526020017f0f5fa90f7751763621c1bb80eeaf3e9756914d44df9907cd047bead732e046268152508160800151600281518110610b5157fe5b602002602001018190525090565b610b67611356565b610b6f611370565b836000015181600060038110610b8157fe5b602002018181525050836020015181600160038110610b9c57fe5b6020020181815250508281600260038110610bb357fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610bdc57610bde565bfe5b5080610c52576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610c62611356565b610c6a611392565b836000015181600060048110610c7c57fe5b602002018181525050836020015181600160048110610c9757fe5b602002018181525050826000015181600260048110610cb257fe5b602002018181525050826020015181600360048110610ccd57fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610cf657610cf8565bfe5b5080610d6c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610d7c611356565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610db9575060008360200151145b15610ddd576040518060400160405280600081526020016000815250915050610e09565b60405180604001604052808460000151815260200182856020015181610dff57fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610e2a57600080fd5b50604051908082528060200260200182016040528015610e6457816020015b610e51611356565b815260200190600190039081610e495790505b5090506060600467ffffffffffffffff81118015610e8157600080fd5b50604051908082528060200260200182016040528015610ebb57816020015b610ea86113b4565b815260200190600190039081610ea05790505b5090508a82600081518110610ecc57fe5b60200260200101819052508882600181518110610ee557fe5b60200260200101819052508682600281518110610efe57fe5b60200260200101819052508482600381518110610f1757fe5b60200260200101819052508981600081518110610f3057fe5b60200260200101819052508781600181518110610f4957fe5b60200260200101819052508581600281518110610f6257fe5b60200260200101819052508381600381518110610f7b57fe5b6020026020010181905250610f908282610fa0565b9250505098975050505050505050565b60008151835114611019576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff8111801561104057600080fd5b5060405190808252806020026020018201604052801561106f5781602001602082028036833780820191505090505b50905060008090505b838110156112155786818151811061108c57fe5b6020026020010151600001518260006006840201815181106110aa57fe5b6020026020010181815250508681815181106110c257fe5b6020026020010151602001518260016006840201815181106110e057fe5b6020026020010181815250508581815181106110f857fe5b60200260200101516000015160006002811061111057fe5b602002015182600260068402018151811061112757fe5b60200260200101818152505085818151811061113f57fe5b60200260200101516000015160016002811061115757fe5b602002015182600360068402018151811061116e57fe5b60200260200101818152505085818151811061118657fe5b60200260200101516020015160006002811061119e57fe5b60200201518260046006840201815181106111b557fe5b6020026020010181815250508581815181106111cd57fe5b6020026020010151602001516001600281106111e557fe5b60200201518260056006840201815181106111fc57fe5b6020026020010181815250508080600101915050611078565b5061121e6113da565b6000602082602086026020860160086107d05a03fa9050806000811461124357611245565bfe5b50806112b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b6000826000600181106112c857fe5b602002015114159550505050505092915050565b60405180606001604052806112ef611356565b81526020016112fc6113b4565b8152602001611309611356565b81525090565b6040518060a00160405280611322611356565b815260200161132f6113b4565b815260200161133c6113b4565b81526020016113496113b4565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806113c76113fc565b81526020016113d46113fc565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea264697066735822122047ad7bfbefd966517e18d3e99a5a8c6c1b7cbc2cc6b44ae7a57348fcc681ac3464736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[2])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}